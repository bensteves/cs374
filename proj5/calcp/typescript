Script started on Wed 13 Oct 2021 10:34:19 PM EDT
]0;bjs48@borg-head1:~/cs374/proj5[?1034h[bjs48@borg-head1 proj5]$ make
make: `calcPI' is up to date.
]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ cat calcPI.c
/* calcPi.c calculates PI using the integral of the unit circle.
 * Since the area of the unit circle is PI, 
 *  PI = 4 * the area of a quarter of the unit circle 
 *    (i.e., its integral from 0.0 to 1.0)
 *
 * Joel Adams, Fall 2013 for CS 374 at Calvin College.
 * 
 * Edited By: Ben Steves
 * CS374
 * Project 5
 * 10-13-21
 *
 */

#include "integral.h"   // integrate()
#include <stdio.h>      // printf(), etc.
#include <mpi.h>
#include <stdlib.h>     // exit()
#include <math.h>       // sqrt() 


/* function for unit circle (x^2 + y^2 = 1)
 * parameter: x, a double
 * return: sqrt(1 - x^2)
 */
double f(double x) {
   return sqrt(1.0 - x*x);
}

/* retrieve desired number of trapezoids from commandline arguments
 * parameters: argc: the argument count
 *             argv: the argument vector
 * return: the number of trapezoids to be used.
 */            
unsigned long long processCommandLine(int argc, char** argv) {
   if (argc == 1) {
       return 1;
   } else if (argc == 2) {
//       return atoi( argv[1] );
       return strtoull( argv[1], 0, 10 );
   } else {
       fprintf(stderr, "Usage: ./calcPI [numTrapezoids]");
       exit(1);
   }
}
 

int main(int argc, char** argv) {
   long double approximatePI = 0;
   const long double REFERENCE_PI = 3.141592653589793238462643383279L;
   unsigned long long numTrapezoids = processCommandLine(argc, argv); 
   int id = -1;
   int numProcesses = -1;
   double startTime = 0.0, totalTime = 0.0;
   
   MPI_Init(&argc, &argv);
   MPI_Comm_rank(MPI_COMM_WORLD, &id);
   MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);
   
   startTime = MPI_Wtime();

   //added id and np as parameters to the integrateTrap function
   approximatePI = integrateTrap(0.0, 1.0, numTrapezoids, id, numProcesses) * 4.0;
   
   if (id == 0) {
	    totalTime = MPI_Wtime() - startTime;

	    printf("Time: %f \n", totalTime);
	    printf("Using %llu trapezoids, the approximate vs actual values of PI are:\n%.30Lf\n%.30Lf\n",
           numTrapezoids, approximatePI, REFERENCE_PI);}
   

   return 0;
}

]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ cat integral.h
/* integral.h declares integral, a function to calculate
 *  definite integrals using the trapezoidal rule.
 *
 * Joel Adams, Fall 2013 for CS 374 at Calvin College.
 */

long double integrateTrap(double xLo, double xHi,
                          unsigned long long numTrapezoids, int id, int numProcs);

]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ cat integral.c
/* integral.c defines integrateTrap(), a function to approximate
 *  definite integrals using the trapezoidal rule. 
 *
 * Joel Adams, Fall 2013.
 *
 * Edited By: Ben Steves
 * CS374
 * Project 5
 * 10-13-21
 */

#include "integral.h"
#include <mpi.h>

/* declaration of the function to be integrated,
 * which must be defined in the caller of integrate()
 * or a linking error will occur
 */
extern double f(double x); 

/* function to approximate an integral:
 * parameters: xLo, the left endpoint
 *             xHi, the right endpoint
 *             numTrapezoids, the number of trapezoids to use
 * return: the approximate integral of f(x) from x1 to x2.
 */
long double integrateTrap(double xLo, double xHi,
                           unsigned long long numTrapezoids, int id, int numProcs) {
   long double delta = (xHi - xLo) / numTrapezoids;
   long double result = 0;
   long double globalResult = 0;
   unsigned long long i = 0;

   //for first process
   if (id == 0) {
	result = (f(xLo) + f(xHi)) * 0.5;
   }
   
   //slices approach to divide problem across processes
   for (i = id; i < numTrapezoids; i+=numProcs) {
     result += f(xLo + i*delta);
   }
   
   //reduce to bring all together
   MPI_Reduce(&result, &globalResult, 1, MPI_LONG_DOUBLE, 
				MPI_SUM, 0, MPI_COMM_WORLD);
   
   globalResult *= delta;

   return globalResult;
} 

/* Note: The integral is approximately
 *   delta * (f(xLo) + f(x1)) / 2
 * + delta * (f(x1) + f(x2)) / 2
 * + delta * (f(x2) + f(x3)) / 2
 * ...
 * + delta * (f(x[n-2] + f(x[n-1]) / 2
 * + delta * (f(x[n-1]) + f(x[n])) / 2
 */

]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ sbatch 64_1t.slurm
Submitted batch job 200063
]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ ls  
1_100k.slurm   32_1t.slurm       slurm-199976.out  slurm-200002.out
1_100m.slurm   4_100k.slurm      slurm-199977.out  slurm-200003.out
1_10b.slurm    4_100m.slurm      slurm-199978.out  slurm-200004.out
1_10m.slurm    4_10b.slurm       slurm-199979.out  slurm-200005.out
1_1b.slurm     4_10m.slurm       slurm-199980.out  slurm-200006.out
1_1m.slurm     4_1b.slurm        slurm-199981.out  slurm-200007.out
16_100b.slurm  4_1m.slurm        slurm-199982.out  slurm-200008.out
16_100k.slurm  64_100b.slurm     slurm-199983.out  slurm-200009.out
16_100m.slurm  64_1t.slurm       slurm-199984.out  slurm-200010.out
16_10b.slurm   8_100k.slurm      slurm-199985.out  slurm-200011.out
16_10m.slurm   8_100m.slurm      slurm-199986.out  slurm-200012.out
16_1b.slurm    8_10b.slurm       slurm-199987.out  slurm-200013.out
16_1m.slurm    8_10m.slurm       slurm-199988.out  slurm-200014.out
2_100k.slurm   8_1b.slurm        slurm-199989.out  slurm-200015.out
2_100m.slurm   8_1m.slurm        slurm-199990.out  slurm-200016.out
2_10b.slurm    [0m[38;5;34mcalcPI[0m            slurm-199991.out  slurm-200017.out
2_10m.slurm    calcPI.c          slurm-199992.out  slurm-200018.out
2_1b.slurm     calcPI.o          slurm-199993.out  slurm-200020.out
2_1m.slurm     integral.c        slurm-199994.out  slurm-200021.out
32_100b.slurm  integral.h        slurm-199995.out  slurm-200024.out
32_100k.slurm  integral.o        slurm-199996.out  slurm-200062.out
32_100m.slurm  Makefile          slurm-199997.out  slurm-200063.out
32_10b.slurm   slurm-199892.out  slurm-199998.out  typescript
32_10m.slurm   slurm-199893.out  slurm-199999.out
32_1b.slurm    slurm-199911.out  slurm-200000.out
32_1m.slurm    slurm-199975.out  slurm-200001.out
]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ cat slurm-200063.out
Time: 105.732301 
Using 1000000000000 trapezoids, the approximate vs actual values of PI are:
3.141592653593793237846304444716
3.141592653589793238512808959406
]0;bjs48@borg-head1:~/cs374/proj5[bjs48@borg-head1 proj5]$ exit

Script done on Wed 13 Oct 2021 10:38:07 PM EDT
